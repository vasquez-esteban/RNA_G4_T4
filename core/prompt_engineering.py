"""Script de construcci√≥n de Prompt"""

INSTRUCCIONES_POR_GENERO = {
    "Fantas√≠a": "Incluye elementos de magia, criaturas m√≠ticas y un mundo imaginario.",
    "Misterio": "Plantea un enigma o crimen. Deja pistas y resuelve el misterio al final.",
    "Romance": "Desarrolla una historia centrada en una relaci√≥n emocional y sus conflictos.",
    "Terror": "Crea tensi√≥n y miedo. Usa atm√≥sferas oscuras, suspenso y sorpresas.",
    "Ciencia ficci√≥n": "Incluye tecnolog√≠a avanzada o viajes en el tiempo en un futuro posible.",
    "Comedia": "Usa situaciones graciosas y lenguaje humor√≠stico para entretener.",
    "Aventura": "Desarrolla una misi√≥n o viaje con riesgos, exploraci√≥n y acci√≥n.",
}

INSTRUCCIONES_LONGITUD = {
    "Corta": "Tu historia debe tener entre 300 y 400 palabras exactamente. S√© preciso. No superes ese rango.",
    "Mediana": "Tu historia debe tener entre 400 y 600 palabras exactamente. S√© preciso. Mant√©n un desarrollo intermedio.",
    "Larga": "Tu historia debe tener entre 600 y 800 palabras. S√© preciso. Exp√°ndete con m√°s detalle y profundidad narrativa, pero no superes el rango de palabras",
}


def construir_prompt(entrada_usuario: dict) -> str:
    genero = entrada_usuario.get("g√©nero", "Fantas√≠a")
    tono = entrada_usuario.get("tono", "Dram√°tico")
    longitud = entrada_usuario.get("longitud", "Mediana")
    personajes = entrada_usuario.get("personajes", "")
    escenario = entrada_usuario.get("escenario", "")
    elementos = entrada_usuario.get("elementos_trama", {})
    conflicto = elementos.get("conflicto", "")
    obstaculos = elementos.get("obstaculos", "")
    resolucion = elementos.get("resolucion", "")
    tiene_dialogo = entrada_usuario.get("incluir_dialogo")

    instrucciones_genero = INSTRUCCIONES_POR_GENERO.get(genero, "")
    instrucciones_longitud = INSTRUCCIONES_LONGITUD.get(longitud, "")

    prompt_final = f"""
Eres un escritor profesional especializado en cuentos del g√©nero **{genero}**, con un tono **{tono}**.

Tu objetivo es escribir una historia original y atractiva. {instrucciones_longitud}

üéØ Consideraciones espec√≠ficas para este g√©nero:
{instrucciones_genero}

üß≠ Estructura sugerida:
1. **Introducci√≥n:** Presenta el escenario y a los personajes.
2. **Desarrollo:** Introduce el conflicto y los obst√°culos.
3. **Resoluci√≥n:** Cierra la historia con una conclusi√≥n satisfactoria.

üßç **Personajes:** {personajes}
üåç **Escenario:** {escenario}
‚öîÔ∏è **Conflicto:** {conflicto}
üß± **Obst√°culos:** {obstaculos}
üîì **Resoluci√≥n esperada:** {resolucion}

üìö Comienza la historia a continuaci√≥n:

‚ö†Ô∏è Importante: La historia debe ser apropiada para todos los p√∫blicos. No incluyas lenguaje sexual, escenas violentas, contenido expl√≠cito, discriminaci√≥n ni situaciones perturbadoras. Mant√©n un tono respetuoso y seguro.
"""
    if tiene_dialogo:
        prompt_final += "\n\nüó£Ô∏è Instrucci√≥n adicional: Aseg√∫rate de incluir di√°logos realistas entre los personajes, usando comillas o guiones. El di√°logo debe aportar al desarrollo del conflicto y a la caracterizaci√≥n."

    return prompt_final.strip()


def construir_prompt_continuacion(historia_previa: str, entrada_usuario: dict) -> str:
    genero = entrada_usuario.get("g√©nero", "Fantas√≠a")
    tono = entrada_usuario.get("tono", "Dram√°tico")
    instrucciones_genero = INSTRUCCIONES_POR_GENERO.get(genero, "")

    prompt = f"""
Eres un escritor del g√©nero **{genero}** con un tono **{tono}**.

Tu tarea es continuar una historia existente manteniendo coherencia con los personajes, el conflicto y el estilo narrativo ya usado.

{instrucciones_genero}

Historia anterior:
\"\"\"
{historia_previa}
\"\"\"

Contin√∫a la historia justo donde termin√≥, agregando nuevos eventos, complicaciones o resoluci√≥n alternativa si aplica:
"""
    return prompt.strip()
